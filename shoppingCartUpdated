
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

public class shoppingCart extends JFrame implements ActionListener {

	private ArrayList<CartItem> cartItemsList = new ArrayList<>();
    private JPanel mainPanel, itemPanel, pricePanel, totalPanel;
    private JLabel totalLabel;
    public JTextArea totalArea, itemTextArea, priceTextArea;
    private JButton btnCheckOut, btnBackToHp, btnRemoveItem, btnTotal;

    class CartItem {
        private String itemName;
        private String itemPrice;

        public CartItem(String itemName, String itemPrice) {
            this.itemName = itemName;
            this.itemPrice = itemPrice;
        }

        public String getItemName() {
            return itemName;
        }

        public String getItemPrice() {
            return itemPrice;
        }
    }
    
    public shoppingCart() {

        setTitle("SHOPPING CART");
        setSize(800, 600);
        Image icon = Toolkit.getDefaultToolkit().getImage("C:\\Downloads\\olshoppinglogo.png");    
        setIconImage(icon); 
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());
        setLocationRelativeTo(null);

        mainPanel = new JPanel();
        mainPanel.setBorder(BorderFactory.createEmptyBorder(40, 40, 40, 40));
        mainPanel.setLayout(new GridLayout(1, 2));
        mainPanel.setBackground(new java.awt.Color(204, 204, 204));

        JLabel titleLabel = new JLabel("SHOPPING CART");
        titleLabel.setFont(new Font("Arial", Font.BOLD, 25));
        titleLabel.setHorizontalAlignment(JLabel.CENTER);
        titleLabel.setBorder(BorderFactory.createEmptyBorder(20, 25, 0, 0));
        add(titleLabel, BorderLayout.NORTH);

        itemPanel = new JPanel();
        itemPanel.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createEtchedBorder(),
                "ITEMS",
                TitledBorder.DEFAULT_JUSTIFICATION,
                TitledBorder.DEFAULT_POSITION,
                new Font("Times New Roman", Font.BOLD, 16)));
        itemPanel.setLayout(new GridLayout(0, 1));
        itemPanel.setBackground(Color.WHITE);
        itemTextArea = new JTextArea();
        Font itemFont = new Font("Calibri", Font.PLAIN, 16);
        itemTextArea.setFont(itemFont);
        itemTextArea.setEditable(false);
        JScrollPane itemScrollPane = new JScrollPane(itemTextArea);
        itemPanel.add(itemScrollPane, BorderLayout.CENTER);

        pricePanel = new JPanel();
        pricePanel.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createEtchedBorder(),
                "PRICES",
                TitledBorder.DEFAULT_JUSTIFICATION,
                TitledBorder.DEFAULT_POSITION,
                new Font("Times New Roman", Font.BOLD, 16)));
        pricePanel.setLayout(new GridLayout(0, 1));
        pricePanel.setBackground(Color.WHITE);
        priceTextArea = new JTextArea();
        Font priceFont = new Font("Calibri", Font.PLAIN, 16);
        priceTextArea.setFont(priceFont);
        priceTextArea.setEditable(false);
        JScrollPane priceScrollPane = new JScrollPane(priceTextArea);
        pricePanel.add(priceScrollPane, BorderLayout.CENTER);

        mainPanel.add(itemPanel);
        mainPanel.add(pricePanel);

        Container pane = getContentPane();
        setContentPane(pane);
        pane.add(mainPanel);

        totalLabel = new JLabel("Total:");
        totalLabel.setFont(new Font("Arial", Font.BOLD, 16));
        totalArea = new JTextArea();
        Font totalFont = new Font("Calibri", Font.PLAIN, 16);
        totalArea.setFont(totalFont);
        totalArea.setEditable(false);
        JScrollPane totalScrollPane = new JScrollPane(totalArea);

        totalPanel = new JPanel(new BorderLayout());
        totalPanel.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createEtchedBorder(),
                "RECEIPT",
                TitledBorder.DEFAULT_JUSTIFICATION,
                TitledBorder.DEFAULT_POSITION,
                new Font("Times New Roman", Font.BOLD, 16)));
        totalPanel.setBackground(Color.WHITE);
        totalPanel.add(totalLabel, BorderLayout.SOUTH);
        totalPanel.add(totalScrollPane, BorderLayout.CENTER);
        mainPanel.add(totalPanel, BorderLayout.EAST);

        btnCheckOut = new JButton("CHECKOUT");
        btnCheckOut.setFont(new Font("Arial", Font.BOLD, 13));
        btnCheckOut.addActionListener(this);

        btnBackToHp = new JButton("BACK TO HOMEPAGE");
        btnBackToHp.setFont(new Font("Arial", Font.BOLD, 13));
        btnBackToHp.addActionListener(this);

        btnRemoveItem = new JButton("REMOVE ITEM");
        btnRemoveItem.setFont(new Font("Arial", Font.BOLD, 13));
        btnRemoveItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedText = itemTextArea.getSelectedText();
                if (selectedText != null) {
                    removeFromCart(selectedText);
                }
            }
        });

        btnTotal = new JButton("TOTAL");
        btnTotal.setFont(new Font("Arial", Font.BOLD, 13));
        btnTotal.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                calculateTotal();
            }
        });

        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new FlowLayout(FlowLayout.CENTER));
        buttonPanel.setBackground(new java.awt.Color(102, 102, 0));
        buttonPanel.setBorder(new EmptyBorder(10, 0, 10, 0));
        buttonPanel.add(btnBackToHp);
        buttonPanel.add(btnCheckOut);
        buttonPanel.add(btnRemoveItem);
        buttonPanel.add(btnTotal);
        add(buttonPanel, BorderLayout.SOUTH);

        setVisible(true);

        loadCartItems();

        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                saveCartItemsToFile(); // Save cart items to "cart.txt" before closing the program
            }
        });
    }

    // ... (the rest of the class remains unchanged)


    private void loadCartItems() {
        try {
            BufferedReader reader = new BufferedReader(new FileReader("cart.txt"));
            String line;

            while ((line = reader.readLine()) != null) {
                String[] itemData = line.split(":");
                if (itemData.length == 3) { // Check if the line has 3 parts: item, price, and quantity
                    String itemName = itemData[0];

                    // Modify the way we extract the price value
                    String rawPrice = itemData[1].replaceAll("[^0-9]", "").trim();
                    int itemPrice = Integer.parseInt(rawPrice);
                    int itemQuantity = Integer.parseInt(itemData[2]);

                    int totalPrice = itemPrice * itemQuantity;

                    cartItemsList.add(new CartItem(itemName, "Price: ₱" + itemPrice + " (Quantity: " + itemQuantity + ") = ₱" + totalPrice));
                }
            }
         // Display cart items and prices in the GUI
            StringBuilder itemsBuilder = new StringBuilder();
            StringBuilder pricesBuilder = new StringBuilder();

            for (CartItem cartItem : cartItemsList) {
                itemsBuilder.append(cartItem.getItemName()).append("\n");
                pricesBuilder.append(cartItem.getItemPrice()).append("\n");
            }

            itemTextArea.setText(itemsBuilder.toString().trim()); // Remove trailing empty line
            priceTextArea.setText(pricesBuilder.toString().trim()); // Remove trailing empty line

            reader.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        } catch (NumberFormatException ex) {
            ex.printStackTrace();
            // Handle any NumberFormatException that might occur during parsing
            // This will help identify any discrepancies in the format of the "cart.txt" file
        }
    }


    private void removeFromCart(String item) {
        ArrayList<CartItem> updatedItemsList = new ArrayList<>();

        for (CartItem cartItem : cartItemsList) {
            if (!cartItem.getItemName().equals(item)) {
                updatedItemsList.add(cartItem);
            }
        }

        // Update the cartItemsList with the new list of items
        cartItemsList = updatedItemsList;

        // Update the text areas with the new content
        StringBuilder updatedItems = new StringBuilder();
        StringBuilder updatedPrices = new StringBuilder();
        for (CartItem cartItem : cartItemsList) {
            updatedItems.append(cartItem.getItemName()).append("\n");
            updatedPrices.append(cartItem.getItemPrice()).append("\n");
        }
        itemTextArea.setText(updatedItems.toString().trim());
        priceTextArea.setText(updatedPrices.toString().trim());

        // Save the updated items and prices to a file
        saveCartItemsToFile();
    }



    // Update the actionPerformed method for btnRemoveItem
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == btnCheckOut) {
            // Get the selected clothing name and price
            String selectedText = itemTextArea.getSelectedText();
            String[] items = itemTextArea.getText().split("\n");
            String[] prices = priceTextArea.getText().split("\n");
            int selectedIdx = -1;

            for (int i = 0; i < items.length; i++) {
                if (items[i].equals(selectedText)) {
                    selectedIdx = i;
                    break;
                }
            }

            // If a valid item is selected, proceed to CheckOut
            if (selectedIdx != -1) {
                String selectedClothingName = items[selectedIdx];

                // Modify the way we extract the numeric price from the "Price: ₱xxx (Quantity: xx) = ₱yyy" format
                String rawPrice = prices[selectedIdx].split("=")[1].replaceAll("[^0-9]", "").trim();
                int selectedClothingPrice = Integer.parseInt(rawPrice);

                // Create an instance of the CheckOut class and pass the clothing details
                CheckOut checkOutFrame = new CheckOut(selectedClothingName, selectedClothingPrice);

                // Remove the selected item and price from the text areas
                items[selectedIdx] = "";
                prices[selectedIdx] = "";

                // Update the text areas with the new content
                StringBuilder updatedItems = new StringBuilder();
                StringBuilder updatedPrices = new StringBuilder();
                for (int i = 0; i < items.length; i++) {
                    if (!items[i].isEmpty()) {
                        updatedItems.append(items[i]);
                        updatedPrices.append(prices[i]);
                        if (i < items.length - 1) {
                            updatedItems.append("\n");
                            updatedPrices.append("\n");
                        }
                    }
                }
                itemTextArea.setText(updatedItems.toString().trim());
                priceTextArea.setText(updatedPrices.toString().trim());

                // Save the updated items and prices to a file
                try {
                    BufferedWriter writer = new BufferedWriter(new FileWriter("cart.txt"));
                    for (int i = 0; i < items.length; i++) {
                        String item = items[i];
                        String price = prices[i];
                        if (!item.isEmpty()) {
                            writer.write(item + ":" + price);
                            writer.newLine();
                        }
                    }
                    writer.close();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }

                // Recalculate the total after checkout
                calculateTotal();

                dispose(); // Close the shoppingCart frame
            } else {
                JOptionPane.showMessageDialog(this, "Please highlight the item to select from the cart.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else if (e.getSource() == btnBackToHp) {
            dispose();
            new Homepage().setVisible(true); // Show the Homepage window
        } else if (e.getSource() == btnRemoveItem) {
            String selectedText = itemTextArea.getSelectedText();
            if (selectedText != null) {
                removeFromCart(selectedText);
            }
        } else if (e.getSource() == btnTotal) {
            calculateTotal();
        }
    }

    // Method to calculate the total price of items in the cart
    private void calculateTotal() {
        String[] items = itemTextArea.getText().split("\n");
        String[] prices = priceTextArea.getText().split("\n");
        int total = 0;

        StringBuilder receiptBuilder = new StringBuilder();
        for (int i = 0; i < items.length; i++) {
            receiptBuilder.append(items[i]).append("  ").append(prices[i]).append("\n");
            String rawPrice = prices[i].split("=")[1].replaceAll("[^0-9]", "").trim();
            int itemPrice = Integer.parseInt(rawPrice);
            total += itemPrice;
        }

    

        // Set the receipt content to the totalArea
        totalArea.setText(receiptBuilder.toString().trim());

        // Set the total amount to the totalLabel
        totalLabel.setText("Total: ₱" + total);
    }

    
    private void saveCartItemsToFile() {
        String[] items = itemTextArea.getText().split("\n");
        String[] prices = priceTextArea.getText().split("\n");

        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter("cart.txt"));
            for (int i = 0; i < items.length; i++) {
                // Using "tab" as a delimiter between item and price when writing to the file
                writer.write(items[i] + ":" + prices[i]);
                writer.newLine();
            }
            writer.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
    
}
